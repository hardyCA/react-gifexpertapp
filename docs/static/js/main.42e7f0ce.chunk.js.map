{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategoria","useState","inpuntValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","category","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EAERC,mBAAS,IAFD,mBAEtCC,EAFsC,KAEzBC,EAFyB,KAiB7C,OAEI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACEJ,EAAYK,OAAOC,OAAS,IAC5BR,GAAa,SAAAS,GAAI,OAAKP,GAAL,mBAAqBO,OACtCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCJlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCFPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIjC,OACI,yBAAKc,UAAU,QACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCJHO,EAAU,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAAgB,ECDd,SAACA,GAAe,IAAD,EAEbd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAmBvC,OAZAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EACI,CACIf,KAAMkB,EACNL,SAAS,SAI1B,CAACpB,IAEGqB,EDhB2BK,CAAa1B,GAAjCa,EAFwB,EAE9BN,KAAca,EAFgB,EAEhBA,QAEtB,OACI,oCACI,4BAAKpB,GAEHoB,GAAW,yCAEb,yBAAKJ,UAAU,aAGPH,EAAOJ,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACLD,UEjBnBkB,EAAe,WAAO,IAAD,EAEI1C,mBAAS,CAAC,cAFd,mBAEvBc,EAFuB,KAEZf,EAFY,KAI9B,OACI,oCACI,6CACA,kBAAC,EAAD,CAAaA,aAAcA,IAC3B,6BACA,4BAEQe,EAAUS,KAAI,SAACoB,GAAD,OACV,kBAAC,EAAD,CACI7B,UAAW6B,EACXF,IAAKE,U,MCVjCC,IAASC,OACL,kBAAC,EAAD,MACHC,SAASC,eAAe,U","file":"static/js/main.42e7f0ce.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategoria }) => {\r\n\r\n    const [inpuntValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (inpuntValue.trim().length > 2) {\r\n            setCategoria(cats => [inpuntValue, ...cats])\r\n            setInputValue('')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inpuntValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategoria: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n\r\n\r\nexport const getGifs = async (categoria) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=V8rS5uh9C4aapiYjmUVGX7xmBrWwwpY7`\r\n    const resp = await fetch(url)\r\n    const { data } = await resp.json()\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\n\r\nexport const GifGrid = ({ categoria }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(categoria);\r\n\r\n    return (\r\n        <>\r\n            <h3>{categoria}</h3>\r\n\r\n            { loading && <p>Cargando..</p>}\r\n\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    images.map((img) => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = (categoria) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(categoria)\r\n            .then(imgs => {\r\n                setState(\r\n                    {\r\n                        data: imgs,\r\n                        loading: false\r\n                    }\r\n                )\r\n            })\r\n    }, [categoria])\r\n\r\n    return state\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categoria, setCategoria] = useState(['One Punch'])\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExzpertApp</h2>\r\n            <AddCategory setCategoria={setCategoria} />\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categoria.map((category) =>\r\n                        <GifGrid\r\n                            categoria={category}\r\n                            key={category}\r\n                        />\r\n                    )\r\n                }\r\n\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp'\n\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}